/*
 * This file is generated by jOOQ.
 */
package de.wirvsvirus.zentralesmelderegister.model.jooq.tables;


import de.wirvsvirus.zentralesmelderegister.model.jooq.Keys;
import de.wirvsvirus.zentralesmelderegister.model.jooq.Public;
import de.wirvsvirus.zentralesmelderegister.model.jooq.tables.records.UserAuthorityRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAuthority extends TableImpl<UserAuthorityRecord> {

    private static final long serialVersionUID = 476159848;

    /**
     * The reference instance of <code>public.user_authority</code>
     */
    public static final UserAuthority USER_AUTHORITY = new UserAuthority();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAuthorityRecord> getRecordType() {
        return UserAuthorityRecord.class;
    }

    /**
     * The column <code>public.user_authority.authority</code>.
     */
    public final TableField<UserAuthorityRecord, String> AUTHORITY = createField("authority", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_authority.user_account_id</code>.
     */
    public final TableField<UserAuthorityRecord, Long> USER_ACCOUNT_ID = createField("user_account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.user_authority</code> table reference
     */
    public UserAuthority() {
        this(DSL.name("user_authority"), null);
    }

    /**
     * Create an aliased <code>public.user_authority</code> table reference
     */
    public UserAuthority(String alias) {
        this(DSL.name(alias), USER_AUTHORITY);
    }

    /**
     * Create an aliased <code>public.user_authority</code> table reference
     */
    public UserAuthority(Name alias) {
        this(alias, USER_AUTHORITY);
    }

    private UserAuthority(Name alias, Table<UserAuthorityRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAuthority(Name alias, Table<UserAuthorityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserAuthority(Table<O> child, ForeignKey<O, UserAuthorityRecord> key) {
        super(child, key, USER_AUTHORITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserAuthorityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserAuthorityRecord, ?>>asList(Keys.USER_AUTHORITY__USER_AUTHORITY___FK___USER_ACCOCUNT);
    }

    public UserAccount userAccount() {
        return new UserAccount(this, Keys.USER_AUTHORITY__USER_AUTHORITY___FK___USER_ACCOCUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserAuthority as(String alias) {
        return new UserAuthority(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserAuthority as(Name alias) {
        return new UserAuthority(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuthority rename(String name) {
        return new UserAuthority(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuthority rename(Name name) {
        return new UserAuthority(name, null);
    }
}
