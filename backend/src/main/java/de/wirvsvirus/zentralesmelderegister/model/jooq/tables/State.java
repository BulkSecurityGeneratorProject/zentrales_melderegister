/*
 * This file is generated by jOOQ.
 */
package de.wirvsvirus.zentralesmelderegister.model.jooq.tables;


import de.wirvsvirus.zentralesmelderegister.model.jooq.Indexes;
import de.wirvsvirus.zentralesmelderegister.model.jooq.Keys;
import de.wirvsvirus.zentralesmelderegister.model.jooq.Public;
import de.wirvsvirus.zentralesmelderegister.model.jooq.tables.records.StateRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class State extends TableImpl<StateRecord> {

    private static final long serialVersionUID = 768198321;

    /**
     * The reference instance of <code>public.state</code>
     */
    public static final State STATE = new State();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StateRecord> getRecordType() {
        return StateRecord.class;
    }

    /**
     * The column <code>public.state.id</code>.
     */
    public final TableField<StateRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('state_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.state.coordinates_longitude</code>.
     */
    public final TableField<StateRecord, BigDecimal> COORDINATES_LONGITUDE = createField("coordinates_longitude", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.state.coordinates_latitude</code>.
     */
    public final TableField<StateRecord, BigDecimal> COORDINATES_LATITUDE = createField("coordinates_latitude", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.state.name</code>.
     */
    public final TableField<StateRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.state</code> table reference
     */
    public State() {
        this(DSL.name("state"), null);
    }

    /**
     * Create an aliased <code>public.state</code> table reference
     */
    public State(String alias) {
        this(DSL.name(alias), STATE);
    }

    /**
     * Create an aliased <code>public.state</code> table reference
     */
    public State(Name alias) {
        this(alias, STATE);
    }

    private State(Name alias, Table<StateRecord> aliased) {
        this(alias, aliased, null);
    }

    private State(Name alias, Table<StateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> State(Table<O> child, ForeignKey<O, StateRecord> key) {
        super(child, key, STATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DISTRICT_PK, Indexes.STATE_ID_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StateRecord, Long> getIdentity() {
        return Keys.IDENTITY_STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StateRecord> getPrimaryKey() {
        return Keys.DISTRICT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StateRecord>> getKeys() {
        return Arrays.<UniqueKey<StateRecord>>asList(Keys.DISTRICT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public State as(String alias) {
        return new State(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public State as(Name alias) {
        return new State(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public State rename(String name) {
        return new State(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public State rename(Name name) {
        return new State(name, null);
    }
}
