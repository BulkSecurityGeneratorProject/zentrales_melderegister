/*
 * This file is generated by jOOQ.
 */
package de.wirvsvirus.zentralesmelderegister.model.jooq.tables;


import de.wirvsvirus.zentralesmelderegister.model.jooq.Indexes;
import de.wirvsvirus.zentralesmelderegister.model.jooq.Keys;
import de.wirvsvirus.zentralesmelderegister.model.jooq.Public;
import de.wirvsvirus.zentralesmelderegister.model.jooq.tables.records.CountyRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class County extends TableImpl<CountyRecord> {

    private static final long serialVersionUID = 1357956900;

    /**
     * The reference instance of <code>public.county</code>
     */
    public static final County COUNTY = new County();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountyRecord> getRecordType() {
        return CountyRecord.class;
    }

    /**
     * The column <code>public.county.id</code>.
     */
    public final TableField<CountyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('county_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.county.coordinates_longitude</code>.
     */
    public final TableField<CountyRecord, BigDecimal> COORDINATES_LONGITUDE = createField("coordinates_longitude", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.county.coordinates_latitude</code>.
     */
    public final TableField<CountyRecord, BigDecimal> COORDINATES_LATITUDE = createField("coordinates_latitude", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.county.name</code>.
     */
    public final TableField<CountyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.county.state_id</code>.
     */
    public final TableField<CountyRecord, Long> STATE_ID = createField("state_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.county</code> table reference
     */
    public County() {
        this(DSL.name("county"), null);
    }

    /**
     * Create an aliased <code>public.county</code> table reference
     */
    public County(String alias) {
        this(DSL.name(alias), COUNTY);
    }

    /**
     * Create an aliased <code>public.county</code> table reference
     */
    public County(Name alias) {
        this(alias, COUNTY);
    }

    private County(Name alias, Table<CountyRecord> aliased) {
        this(alias, aliased, null);
    }

    private County(Name alias, Table<CountyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> County(Table<O> child, ForeignKey<O, CountyRecord> key) {
        super(child, key, COUNTY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COUNTY_ID_UINDEX, Indexes.COUNTY_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CountyRecord, Long> getIdentity() {
        return Keys.IDENTITY_COUNTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountyRecord> getPrimaryKey() {
        return Keys.COUNTY_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountyRecord>> getKeys() {
        return Arrays.<UniqueKey<CountyRecord>>asList(Keys.COUNTY_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CountyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CountyRecord, ?>>asList(Keys.COUNTY__COUNTY_STATE_ID_FK);
    }

    public State state() {
        return new State(this, Keys.COUNTY__COUNTY_STATE_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public County as(String alias) {
        return new County(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public County as(Name alias) {
        return new County(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public County rename(String name) {
        return new County(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public County rename(Name name) {
        return new County(name, null);
    }
}
