/*
 * This file is generated by jOOQ.
 */
package de.wirvsvirus.zentralesmelderegister.model.jooq.tables;


import de.wirvsvirus.zentralesmelderegister.model.jooq.Indexes;
import de.wirvsvirus.zentralesmelderegister.model.jooq.Keys;
import de.wirvsvirus.zentralesmelderegister.model.jooq.Public;
import de.wirvsvirus.zentralesmelderegister.model.jooq.tables.records.PatientRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patient extends TableImpl<PatientRecord> {

    private static final long serialVersionUID = -1943129154;

    /**
     * The reference instance of <code>public.patient</code>
     */
    public static final Patient PATIENT = new Patient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientRecord> getRecordType() {
        return PatientRecord.class;
    }

    /**
     * The column <code>public.patient.id</code>.
     */
    public final TableField<PatientRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('patient_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.patient.birthday</code>.
     */
    public final TableField<PatientRecord, OffsetDateTime> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.patient.city_id</code>.
     */
    public final TableField<PatientRecord, Long> CITY_ID = createField("city_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.patient.user_account_id</code>.
     */
    public final TableField<PatientRecord, Long> USER_ACCOUNT_ID = createField("user_account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.patient</code> table reference
     */
    public Patient() {
        this(DSL.name("patient"), null);
    }

    /**
     * Create an aliased <code>public.patient</code> table reference
     */
    public Patient(String alias) {
        this(DSL.name(alias), PATIENT);
    }

    /**
     * Create an aliased <code>public.patient</code> table reference
     */
    public Patient(Name alias) {
        this(alias, PATIENT);
    }

    private Patient(Name alias, Table<PatientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patient(Name alias, Table<PatientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Patient(Table<O> child, ForeignKey<O, PatientRecord> key) {
        super(child, key, PATIENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATIENT_ID_UINDEX, Indexes.PATIENT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PatientRecord, Long> getIdentity() {
        return Keys.IDENTITY_PATIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PatientRecord> getPrimaryKey() {
        return Keys.PATIENT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PatientRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientRecord>>asList(Keys.PATIENT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PatientRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PatientRecord, ?>>asList(Keys.PATIENT__PATIENT_CITY_ID_FK, Keys.PATIENT__PATIENT_USER_ACCOUNT_ID_FK);
    }

    public City city() {
        return new City(this, Keys.PATIENT__PATIENT_CITY_ID_FK);
    }

    public UserAccount userAccount() {
        return new UserAccount(this, Keys.PATIENT__PATIENT_USER_ACCOUNT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Patient as(String alias) {
        return new Patient(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Patient as(Name alias) {
        return new Patient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(String name) {
        return new Patient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Name name) {
        return new Patient(name, null);
    }
}
