/**
 * Zentrales Melderegister
 * Zentrales Melderegister
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DoctorDTO } from '../model/doctorDTO';
import { PatientDTO } from '../model/patientDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PatientControllerService {

    protected basePath = '//localhost:8080/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createPatient
     * 
     * @param birthday 
     * @param cityId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPatientUsingPOST(birthday?: Date, cityId?: number, id?: number, observe?: 'body', reportProgress?: boolean): Observable<PatientDTO>;
    public createPatientUsingPOST(birthday?: Date, cityId?: number, id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PatientDTO>>;
    public createPatientUsingPOST(birthday?: Date, cityId?: number, id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PatientDTO>>;
    public createPatientUsingPOST(birthday?: Date, cityId?: number, id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (birthday !== undefined && birthday !== null) {
            queryParameters = queryParameters.set('birthday', <any>birthday.toISOString());
        }
        if (cityId !== undefined && cityId !== null) {
            queryParameters = queryParameters.set('cityId', <any>cityId);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PatientDTO>('post',`${this.basePath}/v1/patient`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createPatient
     * 
     * @param body doctorIds
     * @param patientId patient-id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPatientUsingPUT(body: Array<number>, patientId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createPatientUsingPUT(body: Array<number>, patientId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createPatientUsingPUT(body: Array<number>, patientId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createPatientUsingPUT(body: Array<number>, patientId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPatientUsingPUT.');
        }

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling createPatientUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/v1/patient/${encodeURIComponent(String(patientId))}/doctors`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deletePatient
     * 
     * @param patientId patient-id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePatientUsingDELETE(patientId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePatientUsingDELETE(patientId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePatientUsingDELETE(patientId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePatientUsingDELETE(patientId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling deletePatientUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/v1/patient/${encodeURIComponent(String(patientId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllPatientsByPatient
     * 
     * @param patientId patient-id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPatientsByPatientUsingGET(patientId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DoctorDTO>>;
    public getAllPatientsByPatientUsingGET(patientId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DoctorDTO>>>;
    public getAllPatientsByPatientUsingGET(patientId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DoctorDTO>>>;
    public getAllPatientsByPatientUsingGET(patientId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling getAllPatientsByPatientUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DoctorDTO>>('get',`${this.basePath}/v1/patient/${encodeURIComponent(String(patientId))}/patient`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllPatients
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPatientsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<PatientDTO>>;
    public getAllPatientsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PatientDTO>>>;
    public getAllPatientsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PatientDTO>>>;
    public getAllPatientsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<PatientDTO>>('get',`${this.basePath}/v1/patient`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPatient
     * 
     * @param patientId patient-id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPatientUsingGET(patientId: number, observe?: 'body', reportProgress?: boolean): Observable<PatientDTO>;
    public getPatientUsingGET(patientId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PatientDTO>>;
    public getPatientUsingGET(patientId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PatientDTO>>;
    public getPatientUsingGET(patientId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling getPatientUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PatientDTO>('get',`${this.basePath}/v1/patient/${encodeURIComponent(String(patientId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updatePatient
     * 
     * @param birthday 
     * @param cityId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePatientUsingPUT(birthday?: Date, cityId?: number, id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updatePatientUsingPUT(birthday?: Date, cityId?: number, id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updatePatientUsingPUT(birthday?: Date, cityId?: number, id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updatePatientUsingPUT(birthday?: Date, cityId?: number, id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (birthday !== undefined && birthday !== null) {
            queryParameters = queryParameters.set('birthday', <any>birthday.toISOString());
        }
        if (cityId !== undefined && cityId !== null) {
            queryParameters = queryParameters.set('cityId', <any>cityId);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/v1/patient`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
