/**
 * Zentrales Melderegister
 * Zentrales Melderegister
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { TestDTO } from '../model/testDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TestControllerService {

    protected basePath = '//localhost:8080/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createTest
     * 
     * @param entryDate 
     * @param id 
     * @param patientId 
     * @param resultDate 
     * @param testDate 
     * @param testResultId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTestUsingPOST(entryDate?: Date, id?: number, patientId?: number, resultDate?: Date, testDate?: Date, testResultId?: number, observe?: 'body', reportProgress?: boolean): Observable<TestDTO>;
    public createTestUsingPOST(entryDate?: Date, id?: number, patientId?: number, resultDate?: Date, testDate?: Date, testResultId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestDTO>>;
    public createTestUsingPOST(entryDate?: Date, id?: number, patientId?: number, resultDate?: Date, testDate?: Date, testResultId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestDTO>>;
    public createTestUsingPOST(entryDate?: Date, id?: number, patientId?: number, resultDate?: Date, testDate?: Date, testResultId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entryDate !== undefined && entryDate !== null) {
            queryParameters = queryParameters.set('entryDate', <any>entryDate.toISOString());
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (patientId !== undefined && patientId !== null) {
            queryParameters = queryParameters.set('patientId', <any>patientId);
        }
        if (resultDate !== undefined && resultDate !== null) {
            queryParameters = queryParameters.set('resultDate', <any>resultDate.toISOString());
        }
        if (testDate !== undefined && testDate !== null) {
            queryParameters = queryParameters.set('testDate', <any>testDate.toISOString());
        }
        if (testResultId !== undefined && testResultId !== null) {
            queryParameters = queryParameters.set('testResultId', <any>testResultId);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TestDTO>('post',`${this.basePath}/v1/test`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteTest
     * 
     * @param testId test-id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTestUsingDELETE(testId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTestUsingDELETE(testId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTestUsingDELETE(testId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTestUsingDELETE(testId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testId === null || testId === undefined) {
            throw new Error('Required parameter testId was null or undefined when calling deleteTestUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/v1/test/${encodeURIComponent(String(testId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllTests
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTestsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TestDTO>>;
    public getAllTestsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestDTO>>>;
    public getAllTestsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestDTO>>>;
    public getAllTestsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TestDTO>>('get',`${this.basePath}/v1/test`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getTest
     * 
     * @param testId test-id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestUsingGET(testId: number, observe?: 'body', reportProgress?: boolean): Observable<TestDTO>;
    public getTestUsingGET(testId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestDTO>>;
    public getTestUsingGET(testId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestDTO>>;
    public getTestUsingGET(testId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testId === null || testId === undefined) {
            throw new Error('Required parameter testId was null or undefined when calling getTestUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TestDTO>('get',`${this.basePath}/v1/test/${encodeURIComponent(String(testId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateTest
     * 
     * @param entryDate 
     * @param id 
     * @param patientId 
     * @param resultDate 
     * @param testDate 
     * @param testResultId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTestUsingPUT(entryDate?: Date, id?: number, patientId?: number, resultDate?: Date, testDate?: Date, testResultId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTestUsingPUT(entryDate?: Date, id?: number, patientId?: number, resultDate?: Date, testDate?: Date, testResultId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTestUsingPUT(entryDate?: Date, id?: number, patientId?: number, resultDate?: Date, testDate?: Date, testResultId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTestUsingPUT(entryDate?: Date, id?: number, patientId?: number, resultDate?: Date, testDate?: Date, testResultId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entryDate !== undefined && entryDate !== null) {
            queryParameters = queryParameters.set('entryDate', <any>entryDate.toISOString());
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (patientId !== undefined && patientId !== null) {
            queryParameters = queryParameters.set('patientId', <any>patientId);
        }
        if (resultDate !== undefined && resultDate !== null) {
            queryParameters = queryParameters.set('resultDate', <any>resultDate.toISOString());
        }
        if (testDate !== undefined && testDate !== null) {
            queryParameters = queryParameters.set('testDate', <any>testDate.toISOString());
        }
        if (testResultId !== undefined && testResultId !== null) {
            queryParameters = queryParameters.set('testResultId', <any>testResultId);
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["X-Melderegister-Authorization"]) {
            headers = headers.set('X-Melderegister-Authorization', this.configuration.apiKeys["X-Melderegister-Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/v1/test`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
